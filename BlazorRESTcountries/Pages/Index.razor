@page "/"
@inject IRESTConuntriesServiceV2 restCountries
@inject NavigationManager NavigationManager

<section class="filter-section">
    <input class="element-shadow"
           type="search"
           placeholder="Search for a country..."
           @oninput="SearchCoutry"
            />
    <select class="element-shadow" 
            title="Filter by region"
            @onchange="SelectRegion">
        <option value="" selected>Filter by region</option>
        @foreach (var regoin in regions)
        {
            <option value="@regoin">@regoin</option>
        }
    </select>
</section>

<section class="countries-section">
    @foreach (var country in filterCountryList)
    {
        <article class="countries-section__card element-shadow" @onclick="() => NavigateToCountry(country.name)">
            <img class="countries-section__card-flag" src="@country.flags.png" alt="@country.demonym flag">
            <div class="countries-section__card-info">
                <h2>@country.name</h2>
                <p><b>Population:</b> @country.population</p>
                <p><b>Region:</b> @country.region</p>
                <p><b>Capital:</b> @country.capital</p>
            </div>
        </article>
    }
</section>


@code {

    List<CountreyV2> countriesList = new();
    List<CountreyV2> filterCountryList = new(); 
    List<string> regions => countriesList.Select(country => country.region).Distinct().ToList();

    protected override async Task OnInitializedAsync()
    {
       filterCountryList = countriesList = await restCountries.GetAllCountries();
    }

    private void NavigateToCountry (string countryName)
    {
        NavigationManager.NavigateTo($"country/{countryName}");
    }

    private void SearchCoutry(ChangeEventArgs e)
    {
        filterCountryList = countriesList.Where(country => country.name.Contains((string)e.Value, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void SelectRegion(ChangeEventArgs e)
    {
        filterCountryList = countriesList.Where(country => country.region.Contains((string)e.Value, StringComparison.OrdinalIgnoreCase)).ToList();
    }
}