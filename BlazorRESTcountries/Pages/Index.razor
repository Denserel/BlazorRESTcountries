@page "/"
@inject IRESTConuntriesServiceV2 restCountries
@inject NavigationManager NavigationManager

<section class="filter-section">
    <input class="element-shadow"
           type="search"
           placeholder="Search for a country..."
           @oninput="SearchCoutry"
            />
    <select class="element-shadow" 
            title="Filter by region"
            @onchange="SelectRegion">
        @if (regions.Any())
        {
            <option value="" selected>Filter by region</option>
            @foreach (var regoin in regions)
            {
                <option value="@regoin">@regoin</option>
            }
        }
        else
        {
            <option value="" disabled selected>Loading...</option>
        }
    </select>
</section>

@if (filterCountryList.Any())
{
    <section class="countries-section">
        @foreach (var country in filterCountryList)
        {
            <article class="countries-section__card element-shadow" @onclick="() => NavigateToCountry(country.alpha3Code)">
                <img loading="lazy" class="countries-section__card-flag" src="@country.flags.png" alt="@country.demonym flag">
                <div class="countries-section__card-info">
                    <h2>@country.name</h2>
                    <p><b>Population: </b>@country.population</p>
                    <p><b>Region: </b>@country.region</p>
                    <p><b>Capital: </b>@country.capital</p>
                </div>
            </article>
        }
    </section>
}
else
{
    <div class="spinner"></div>
}

@code {
    List<CountryV2> countriesList = new();
    List<CountryV2> filterCountryList = new();
    List<string> regions => countriesList.Any() ? countriesList.Select(country => country.region).Distinct().ToList() : new();

    protected override async Task OnInitializedAsync()
    {
       filterCountryList = countriesList = await restCountries.GetAllCountries();
    }

    private void NavigateToCountry (string alphaCode)
    {
        NavigationManager.NavigateTo($"country/{alphaCode}");
    }

    private void SearchCoutry(ChangeEventArgs e)
    {
        filterCountryList = countriesList.Where(country => country.name.Contains(e.Value.ToString(), StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void SelectRegion(ChangeEventArgs e)
    {
        filterCountryList = countriesList.Where(country => country.region.Contains(e.Value.ToString(), StringComparison.OrdinalIgnoreCase)).ToList();
    }
}