@inherits TestContext

@code {
    public IndexTest()
    {
    }

    [Fact]
    public void FilterSectionRndersAsExpectedWhenRegionListWithoutContent()
    {
        var mockRestCountries = new Mock<IRESTConuntriesServiceV2>();

        mockRestCountries.Setup(restCountries => restCountries.GetAllCountries()).ReturnsAsync(CountryV2.BogusCountry.Generate(0));
        Services.AddSingleton<IRESTConuntriesServiceV2>(mockRestCountries.Object);

        var cut = RenderComponent<BlazorRESTcountries.Pages.Index>();

        cut.Find(".filter-section").MarkupMatches(
    @<text>
        <section class="filter-section">
            <input class="element-shadow"
                   type="search"
                   placeholder="Search for a country..." />
            <select class="element-shadow"
                    title="Filter by region">
                <option value="" disabled selected>Loading...</option>
            </select>
        </section>
    </text>
        );
    }

    [Fact]
    public void FilterSectionRndersAsExpectedWhenFilterCountryListisPopulated()
    {
        var mockRestCountries = new Mock<IRESTConuntriesServiceV2>();
        var bogusCountries = CountryV2.BogusCountry.Generate(1);
        var regions = bogusCountries.Select(country => country.region).Distinct().ToList();

        mockRestCountries.Setup(restCountries => restCountries.GetAllCountries()).ReturnsAsync(bogusCountries);
        Services.AddSingleton<IRESTConuntriesServiceV2>(mockRestCountries.Object);

        var cut = RenderComponent<BlazorRESTcountries.Pages.Index>();

        cut.WaitForElement(".filter-section").MarkupMatches(
    @<text>
        <section class="filter-section">
            <input class="element-shadow"
                   type="search"
                   placeholder="Search for a country..." />
            <select class="element-shadow"
                    title="Filter by region">
                <option value="" selected>Filter by region</option>
                @foreach (var regoin in regions)
                {
                    <option value="@regoin">@regoin</option>
                }
            </select>
        </section>
    </text>
    );
    }

    [Fact]
    public void LoadingIndicatorLoadsOnFilterCountryListWithoutContent()
    {
        var mockRestCountries = new Mock<IRESTConuntriesServiceV2>();

        mockRestCountries.Setup(restCountries => restCountries.GetAllCountries()).ReturnsAsync(CountryV2.BogusCountry.Generate(0));
        Services.AddSingleton<IRESTConuntriesServiceV2>(mockRestCountries.Object);

        var cut = RenderComponent<BlazorRESTcountries.Pages.Index>();

        cut.Find(".spinner").MarkupMatches(@<div class="spinner"></div>);
    }

    [Fact]
    public void CountriesSectionLoadsWhenFilterCountryListIsPopulated()
    {
        var mockRestCountries = new Mock<IRESTConuntriesServiceV2>();
        var bogusCountries = CountryV2.BogusCountry.Generate(1);

        mockRestCountries.Setup(restCountries => restCountries.GetAllCountries()).ReturnsAsync(bogusCountries);
        Services.AddSingleton<IRESTConuntriesServiceV2>(mockRestCountries.Object);

        var cut = RenderComponent<BlazorRESTcountries.Pages.Index>();

        cut.WaitForElement(".countries-section").MarkupMatches(
    @<text>
        <section class="countries-section">
            @foreach (var country in bogusCountries)
            {
                <article class="countries-section__card element-shadow">
                    <img loading="lazy" class="countries-section__card-flag" src="@country.flags.png" alt="@country.demonym flag">
                    <div class="countries-section__card-info">
                        <h2>@country.name</h2>
                        <p><b>Population: </b>@country.population</p>
                        <p><b>Region: </b>@country.region</p>
                        <p><b>Capital: </b>@(country.capital ?? "N/A")</p>
                    </div>
                </article>
            }
        </section>
            </text>
    );
    }

    [Fact]
    public void NavigateToExpectedUriOnClick ()
    {
        var mockRestCountries = new Mock<IRESTConuntriesServiceV2>();
        var bogusCountries = CountryV2.BogusCountry.Generate(1);

        mockRestCountries.Setup(restCountries => restCountries.GetAllCountries()).ReturnsAsync(bogusCountries);
        Services.AddSingleton<IRESTConuntriesServiceV2>(mockRestCountries.Object);

        var navigationManager = Services.GetRequiredService<NavigationManager>();

        var cut = RenderComponent<BlazorRESTcountries.Pages.Index>();

        cut.Find(".countries-section__card").Click();

        Assert.Equal($"http://localhost/country/{bogusCountries[0].alpha3Code}", navigationManager.Uri);
    }
}
